<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AP/gAAD/4AAP/+AAH//w/B////+f//////8=
</value>
  </data>
</root>